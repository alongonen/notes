{
	"nodes":[
		{"type":"group","id":"5253e6050e759f2a","x":-2120,"y":-680,"width":480,"height":834,"label":"resources"},
		{"type":"text","text":"## Current Tasks\n```tasks\npath includes perturb-x\nnot done\npriority is not low\n```\n","id":"baab4182099c4d2b","x":-2120,"y":-1080,"width":620,"height":300},
		{"type":"text","text":"Papers\n\n- [[@Compositional perturbation autoencoder for single-cell response modeling]]\n- ","id":"628de0ed447c364f","x":-2100,"y":-601,"width":413,"height":152},
		{"type":"text","text":"**Blogs/Tutorials**\n- [Best Practices Theis](https://www.sc-best-practices.org/preamble.html)\n- \n\n\n","id":"cd3a0323b5444ead","x":-2100,"y":-379,"width":413,"height":122},
		{"type":"text","text":"## questions\n\n``\n```dataviewjs\n// You can update this to filter as you like - filtering for just your daily notes would be good\nconst pages = dv.pages('\"${dv.current().file.folder}\"')\n\n\n// This regex will find the contents of a specifically formatted callout\n// const regex = \nconst regex = />\\s\\[\\!question\\]\\s(.+?)\\s\\#(.+?)/\n\nconst rows = []\nfor (const page of pages) {\nconst file = app.vault.getAbstractFileByPath(page.file.path)\n// Read the file contents\nconst contents = await app.vault.read(file)\n// Extract the summary via regex\nfor (const callout of contents.match(new RegExp(regex, 'sg')) || []) {\n\tconst match = callout.match(new RegExp(regex, 's')) \n\trows.push([match[1], match[2], page.file.link]) \n\t} \n} \ndv.table(['Term', 'Flag', 'Link'], rows)\n```","id":"291ba2c5d39feed3","x":-3000,"y":-580,"width":720,"height":760}
	],
	"edges":[]
}